{"/home/travis/build/npmtest/node-npmtest-diet/test.js":"/* istanbul instrument in package npmtest_diet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-diet/lib.npmtest_diet.js":"/* istanbul instrument in package npmtest_diet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_diet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_diet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-diet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-diet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_diet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_diet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_diet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_diet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_diet.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_diet.__dirname +\n                    '/lib.npmtest_diet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/index.js":"// ===========================================================================\n//                                   Diet\n// ===========================================================================\n\n// ===========================================================================\n//  External Dependencies\n// ===========================================================================\n\n    require('sugar')\n    require('colors')\n    const util = require('util');\n    const EventEmitter = require('eventemitter2').EventEmitter2;\n    \n    \n// ===========================================================================\n//  Internal Dependencies\n// ===========================================================================    \n    \n    const Protocol     = require('./controllers/protocol')\n    const Listener     = require('./controllers/listen')\n    const Host         = require('./controllers/host')\n    const Router       = require('./controllers/router')\n    const Resource     = require('./controllers/resource')\n    const Construct    = require('./controllers/construct')\n    const httpProtocol = require('./controllers/protocols/http')\n\n\n// ===========================================================================\n//  Exports\n// =========================================================================== \n\n    var events = new EventEmitter({ wildcards: true });\n    module.exports = Server;\n    module.exports.on = events.on;\n    module.exports.one = events.once;\n    module.exports.many = events.many;\n    module.exports.off = events.off;\n    module.exports.emit = events.emit;\n    module.exports.onAny = events.onAny;\n\n\n// ===========================================================================\n//  Server\n// =========================================================================== \n\n    function Server(options){\n \n        // -----------------------------------------------------------------------\n        //  Default values\n        // -----------------------------------------------------------------------\n \n            var options = options || {}\n\n        // -----------------------------------------------------------------------\n        //  Get project path\n        // -----------------------------------------------------------------------\n \n            var path = options.path || require('path').dirname(require('callsite')()[1].getFileName());\n \n        // -----------------------------------------------------------------------\n        //  Event: app.create\n        // -----------------------------------------------------------------------\n \n            module.exports.emit('init', { path: path, options: options })\n\n \n        // -----------------------------------------------------------------------\n        //  Print Diet Header to console (if not already initialized)\n        // -----------------------------------------------------------------------\n \n            if(!options.silent && !initialized){ \n                process.stdout.write('\\u001B[2J\\u001B[0;0f'+' Diet '.inverse+(' ('+JSON.parse(require('fs').readFileSync(__dirname+'/package.json').toString()).version+') ☺\\n http://dietjs.com/').dim+'\\n\\n'); \n                initialized = true; \n            }\n        \n        \n        // -----------------------------------------------------------------------\n        // Return a Server Instance\n        // -----------------------------------------------------------------------\n    \t    \n    \t    var app = new App(path, options)\n    \t\n    \t\n    \t// -----------------------------------------------------------------------\n    \t//  Server is an Event Emitter\n    \t// -----------------------------------------------------------------------\n        \t\n        \tvar events = new EventEmitter({ wildcards: true });\n        \tapp.on = events.on;\n        \tapp.one = events.once;\n        \tapp.many = events.many;\n        \tapp.off = events.off;\n        \tapp.emit = events.emit;\n        \tapp.onAny = events.onAny;\n        \n        \n        // -----------------------------------------------------------------------\n        //  Attach HTTP Protocol Handler by default\n        // -----------------------------------------------------------------------\t\n        \tapp.protocol('http', httpProtocol)\n        \tmodule.exports.emit('create', { path: path, options: options, app: app })\n    \t\n    \t\n    \t// -----------------------------------------------------------------------\n    \t//  Return\n    \t// -----------------------------------------------------------------------\n    \t    \n    \t    return app;\n    \t    \n    \t    \n    }\n    \n\n// ===========================================================================\n//  Containers & Helpers\n// ===========================================================================\n    \n    const hosts     = {}\n    const servers   = {}\n    var initialized = false;\n\n\n// ===========================================================================\n//  App\n// ===========================================================================   \n    \n    function App(path, options){\n    \n        // -----------------------------------------------------------------------\n        //  Variables\n        // -----------------------------------------------------------------------\n            \n            this.silent         = options.silent\n            this.defaultHeaders = options.defaultHeaders || { 'X-Powered-By': 'Diet.js', 'Server': 'Diet.js' } // please help spread the word!\n            this.address        = require('ip').address()\n        \tthis.path           = path\n        \tthis.dir            = this.path.match(/([^\\/]*)\\/*$/)[1]\n        \tthis.hosts          = hosts\n        \tthis.protocols      = new Array();\n        \t//this.host           = '0.0.0.0'\n        \t\n    \t\n    \t// -----------------------------------------------------------------------\n    \t//  Methods\n    \t// -----------------------------------------------------------------------\n        \t\n        \tthis.get            = new Router('get'     , 'method' , this)\n        \tthis.post           = new Router('post'    , 'method' , this)  \n        \tthis.head           = new Router('head'    , 'method' , this)  \n        \tthis.put            = new Router('put'     , 'method' , this)  \n        \tthis.delete         = new Router('delete'  , 'method' , this) \n        \tthis.patch          = new Router('patch'   , 'method' , this)\n        \tthis.trace          = new Router('trace'   , 'method' , this)\n        \tthis.options        = new Router('options' , 'method' , this)\n        \tthis.header         = new Router('header'  , 'api'    , this)\n        \tthis.footer         = new Router('footer'  , 'api'    , this) \n        \tthis.missing        = new Router('missing' , 'api'    , this) \n        \tthis.error          = new Router('error'   , 'api'    , this)\n        \tthis.resource       = new Resource(this)\n        \tthis.model          = new Construct('model', 'models', this)\n        \tthis.view           = new Construct('view', 'views', this)\n        \tthis.controller     = new Construct('controller', 'controllers', this)\n        \tthis.protocol       = new Protocol(this)\n        \tthis.listen         = new Listener(this, servers)\n        \tthis.host           = new Host(this, servers)\n    \t\n    \t\n    \t// -----------------------------------------------------------------------\n    \t//  Return Instance\n    \t// -----------------------------------------------------------------------\n    \t    \n    \t    return this\n    \t    \n    }\n\n","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/protocol.js":"// ===========================================================================\n//  Diet.js\n//  Protocol Controller\n// ===========================================================================\n    module.exports = function(app){\n        return function(name, handler){\n            app.emit('protocol.attach', { app: app, name: name, handler: handler })\n            app.protocols.push({ name: name, handler: handler })\n            return app;\n        }\n    }","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/listen.js":"// ===========================================================================\n//  Diet.js\n//  Listener Controller\n// ===========================================================================\n   \"use strict\"\n   \n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n    \n    const url = require('url')\n    const parent = module.parent.exports\n    const utils = require('./utils')\n    \n// ===========================================================================\n//  Exports\n// ===========================================================================\n\t\n    module.exports = function(app, servers){\n        \n    \treturn function(location, options, callback){\n    \t    var callback = typeof options == 'function' ? options : callback ;\n    \t    var options = !options || typeof options == 'function' ? {} : options ;\n    \t    var host = utils.getHost(location, options)\n    \t    app.location = host.location\n    \t    app.port = host.port\n    \t    \n    \t    /*\n    \t    // define location\n            if(!isNaN(location)) {\n            \tapp.location = url.parse(protocolName+'://0.0.0.0:'+location);\n            \n            } else if(typeof location == 'string') {\n                var location = location.indexOf('://') == -1 ? 'http://' + location : location ;\n            \tapp.location = url.parse(location) \n            \n            } else if(typeof location == 'object') {\n            \tapp.location = location;\n            \t\n            } else if(!utils.isset(location)){\n            \tapp.location = url.parse(protocolName+'://0.0.0.0:80/');\n            } */        \n            \n            // define protocol\n    \t\t//var protocol = app.location.protocol === 'http:' ? require('http') : require('https') ;\n    \t\t\n    \t\t// define port\n    \t\t\n    \t\t\n    \t\t// create route containers\n    \t\tapp.routes = typeof app.routes != \"undefined\" ? app.routes : { get: [], post: [], options: [], put: [], patch: [], head: [], delete: [], trace: [], header: [], footer: [], missing: [], error: [] }\n    \t\t\n    \t\t//console.log(isNaN(location), location, typeof location, app.location);\n    \t\t// define host\n    \t\tapp.location.host = app.location.host.split(':')[1] ? app.location.host : app.location.host + ':' + app.port;\n    \t\t//app.host = app.location.host.split(':')[0];\n    \t\t\n    \t\t// save host to hosts\n    \t\tapp.hosts[app.location.host] = app\n    \t\t\n    \t\tapp.emit('listen', { port: app.port, location: app.location, options: options });\n    \t\t\n    \t\t// create new server object\n    \t\t// if port is not found in servers\n    \t\tif(!servers[app.port]){\n    \t\t    var server;\n    \t\t    app.protocols.forEach(function(protocolObject){\n    \t\t        server = protocolObject.handler(app, options, callback)\n    \t\t    })\n    \t\t    \n    \t\t\t// save server to servers with it's port\n    \t\t\tservers[app.port] = server\n    \t\t\t\n    \t\t\t// listen on localhost addresses\n    \t\t\t// Implement check if app.hosts['127.0.0.1:' + port] do nothing else\n    \t\t\t//app.listen('http://localhost:'+app.port, options);\n    \t\t\t//app.listen('http://127.0.0.1:'+app.port, options);\n    \t\t\t//app.listen('http://'+app.address+':'+app.port, options);\n    \t\t\t\n    \t\t// otherwise reuse the server object\n    \t\t} else {\n    \t\t\tvar server = servers[app.port]\n    \t\t\tif(callback) callback();\n    \t\t}\n\n    \t\t// return server\n    \t\tapp.server = server;\n    \t\t\n    \t\t// return app\n    \t\treturn app;\n    \t}\n    }\n   ","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/utils.js":"var url = require('url')\nvar Utils = new Object()\n\nUtils.isset = function isset(object){\n\treturn (object != \"undefined\" && object != undefined && object != null && object != \"\" && typeof(object) != 'undefined') ? true : false ;\n}\n\nUtils.getHost = function(inputLocation, options){\n\tvar options = !options || typeof options == 'function' ? {} : options ;\n\tvar protocolName = (typeof options == 'object' && options.cert || options.key || options.ca) ? 'https' : 'http' ;\n\n\t// define location\n\tif(!isNaN(inputLocation)) {\n\t\tvar location = url.parse(protocolName+'://0.0.0.0:'+inputLocation);\n\t\n\t} else if(typeof inputLocation == 'string') {\n\t    var location = inputLocation.indexOf('://') == -1 ? 'http://' + inputLocation : inputLocation ;\n\t\t\tlocation = url.parse(location) \n\t\n\t} else if(typeof inputLocation == 'object') {\n\t\tvar location = inputLocation;\n\t\t\n\t} else if(!Utils.isset(inputLocation)){\n\t\tvar location = url.parse(protocolName+'://0.0.0.0:80/');\n\t}\n\t\n\tvar port = location.protocol === 'http:' && (!options || (!options.cert && !options.key)) \n\t\t? (location.port || 80) \n\t\t: (location.port || 443) ;\n\t\n\treturn { port: port, location: location }\n}\n\nmodule.exports = Utils","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/host.js":"\"use strict\"\nconst utils = require('./utils')\nmodule.exports = function(app, servers){\n\treturn function(location, options){\n\t\tapp.emit('host', { app: app, location: location, options: options })\n\t\tlet host = utils.getHost(location, options)\n\t\tapp.hosts[host.location.host] = app\n\t}\n}","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/router.js":"// ===========================================================================\n//  Diet.js\n//  Router Controller\n// ===========================================================================\n   \"use strict\"\n   \n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n    \n    const errorPage    = require('./error')\n    const Next         = require('nextjs')\n    const pathToRegex  = require('path-to-regexp')\n    const Domain       = require('domain')\n    const async        = require('async')\n    const parent       = module.parent.exports\n    var Generator      = (function*(){}).constructor;\n\n// ===========================================================================\n//  Exports\n// ===========================================================================\n\n    module.exports = function(method, type, app){\n    \treturn function(path){\n    \t\t\n    \t\tvar args = arguments;\n    \t\tvar argsLength = args.length > 1 ? args.length : 1 ;\n    \t\t\n    \t\tif((type === 'method') && typeof path == 'string'){\n    \t\t\tvar keys = [];\n    \t\t\tvar regex = pathToRegex(path, keys);\n    \t\t}\t\n    \t\t\n    \t\tvar route = {\n    \t\t\tpath: path,\n    \t\t\tparamKeys: keys || false,\n    \t\t\tparamRegex: regex || false,\n    \t\t\thandler: function(request, response, app, nextRoute, signal){\n    \t\t\t\t\n    \t\t\t\tvar next = new Next(argsLength, function(){\n    \t\t\t\t\t\n    \t\t\t\t\tapp.emit('route.end', { method: method, path: path, route: route, app: app, type: type, signal: signal });\n    \t\t\t\t\t\n    \t\t\t\t\tsignal.nextRoute();\n    \t\t\t\t})\n    \t\t\t\tvar count = 0;\n    \t\t\t\t\n    \t\t\t\tapp.emit('route.start', { method: method, path: path, route: route, app: app, type: type, signal: signal });\n    \t\t\t\t\n    \t\t\t\t(function nextController(){\n    \t\t\t\t\t// console.log('\\n## controller', 'count=', count, '| argsLength=',argsLength)\n    \t\t\t\t\t\n    \t\t\t\t\tif(count <= argsLength){\n    \t\t\t\t\t    \n    \t\t\t\t\t\tvar controller = args[count];\n    \t\t\t\t\t\t\n    \t\t\t\t\t\tapp.emit('route.controller.start', { method: method, path: path, route: route, app: app, type: type, controller: controller, signal: signal, current: count, total: argsLength})\n    \t\t\t\t\t\t\n    \t\t\t\t\t\tif(typeof controller == 'function'){\n    \t\t\t\t\t\t\n    \t\t\t\t\t\t\t// console.log(' --> controller [ STARTED ]')\n    \t\t\t\t\t\t\tsignal.return = function(){ \n    \t\t\t\t\t\t\t    app.emit('route.controller.end', { method: method, path: path, route: route, app: app, type: type, signal: signal });\n    \t\t\t\t\t\t\t    \n    \t\t\t\t\t\t\t\t// console.log(' --> controller [ RETURNED ]')\n    \t\t\t\t\t\t\t\tcount++; nextController(); next();\n    \t\t\t\t\t\t\t\t//signal.nextRoute();\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\t\n    \t\t\t\t\t\t\tvar domain = Domain.create();\n    \t\t\t\t\t\t\t\n    \t\t\t\t\t\t\tdomain.on('error', function(error){ \n    \t\t\t\t\t\t\t    if (error.stack) console.error(error.stack);\n    \t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\tsignal.fail.route = route;\n    \t\t\t\t\t\t\t\tsignal.fail.error = error;\n    \t\t\t\t\t\t\t\tsignal.fail.controller = controller;\n    \t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\tapp.emit('route.controller.error', { method: method, path: path, route: route, app: app, type: type, controller: controller, error: error, signal: signal })\n    \t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\terrorPage(error, signal, app, controller);\n    \t\t\t\t\t\t\t});\n    \t\t\t\t\t\t\t\n    \t\t\t\t\t\t\tdomain.run(function(){\n    \t\t\t\t\t\t\t    \n    \t\t\t\t\t\t\t    // If the controller is a Generator\n    \t\t\t\t\t\t\t    if(controller instanceof Generator){\n    \t\t\t\t\t\t\t        \n    \t\t\t\t\t\t\t        // Create Iterator \n    \t\t\t\t\t\t\t        var iterator = controller(signal);\n    \t\t\t\t\t\t\t        \n    \t\t\t\t\t\t\t        // Resurscive Iterator\n    \t\t\t\t\t\t\t        (function nextIteration(error, value){\n    \t\t\t\t\t\t\t            // Get the next Iteration\n    \t\t\t\t\t\t\t            var result = iterator.next(value);\n    \t\t\t\t\t\t\t            \n    \t\t\t\t\t\t\t            app.emit('route.controller.iterate.start', { method: method, path: path, route: route, app: app, type: type, controller: controller, signal: signal, result: result})\n    \t\t\t\t\t\t\t            \n    \t\t\t\t\t\t\t            // If iterator is not finishd\n    \t\t\t\t\t\t\t            if(!result.done){\n    \t\t\t\t\t\t\t                // function\n    \t\t\t\t\t\t\t                if(typeof result.value == 'function'){\n                                                    result.value(nextIteration)\n                                                    \n                                                // array of functions\n                                                } else if (typeof result.value == 'object') {\n                                                    async.each(result.value, function(item, callback){\n                                                        item(function(error, result){ \n                                                            callback({ error: error, result: result })\n                                                        });\n                                                    }, function(values){\n                                                        nextIteration(values.error, values.result);\n                                                    })\n                                                    \n                                                // unknown type\n                                                } else {\n                                                    nextIteration(error, value);\n                                                }\n                                            \n                                            // Call next controller\n    \t\t\t\t\t\t\t            } else {\n    \t\t\t\t\t\t\t                app.emit('route.controller.iterate.end', { method: method, path: path, route: route, app: app, type: type, controller: controller, signal: signal})\n    \t\t\t\t\t\t\t                //count++; \n    \t\t\t\t\t\t\t                //nextController(); \n    \t\t\t\t\t\t\t            }\n    \t\t\t\t\t\t\t        })()\n    \t\t\t\t\t\t\t        \n    \t\t\t\t\t\t\t    // Run Simple Function \n    \t\t\t\t\t\t\t    } else {\n    \t\t\t\t\t\t\t\t    controller(signal)\n    \t\t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\t})\n    \t\t\t\t\t\t} else {\n    \t\t\t\t\t\t    app.emit('route.controller.skip', { method: method, path: path, route: route, app: app, type: type, controller: controller, signal: signal })\n    \t\t\t\t\t\t\t// console.log(' --> controller [ SKIP ]', controller)\n    \t\t\t\t\t\t\tcount++; nextController(); next();\n    \t\t\t\t\t\t}\n    \t\t\t\t\t} else {\n    \t\t\t\t\t    app.emit('route.controller.end', { method: method, path: path, route: route, app: app, type: type, signal: signal })\n    \t\t\t\t\t    //count++;// next();\n    \t\t\t\t\t\t// console.log('--> controller DONE!')\n    \t\t\t\t\t}\n    \t\t\t\t})()\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\tif(!app.routes) app.routes = {}\n    \t\tif(!app.routes[method]) app.routes[method] = [];\n    \t\t\n    \t\tif(type === 'method'){\n    \t\t\n    \t\t\tvar pathRegister = (!isNaN(path)) ? path+'_status' : path\n    \t\t\tif(!app.routes[method][pathRegister]) app.routes[method][pathRegister] = [];\n    \t\t\tapp.routes[method][pathRegister].push(route)\n    \t\t\n    \t\t} else {\n    \t\t\n    \t\t\tapp.routes[method].push(route)\n    \t\t\n    \t\t}\n    \t\t\n    \t\tapp.emit('route.attach', { method: method, path: path, route: route, type: type })\n    \t\t\n    \t\treturn app;\n    \t}\n    \t\n    \treturn app;\n    }\n    \n","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/error.js":"// ===========================================================================\n//  Diet.js\n//  Error Controller\n// ===========================================================================\n   \"use strict\"\n\n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n\n    const RouteIterator = require('./iterator')\n    \n\n// ===========================================================================\n//  Function: Parse Stack Trace\n// ===========================================================================\n    \n    function parseStackTrace(stacktrace){\n    \tlet lines = []\n    \tstacktrace.forEach(function(line){\n    \t\tlines.push(line\n    \t\t.replace(/\\</gi, '&lt;').replace(/\\>/gi, '&gt;')\n    \t\t.replace(/at\\s([^\\(\\)]+)((:[0-9]+))/gi, '<span style=\"color:#B6B6B6; font-size:12px;\">at</span> <span style=\"color:#a021a5;\">$1$2</span>').replace(/at\\s([^\\(\\)]+)\\s/gi, function(all, match){\n    \t\t\tvar tags = match.split('.')\n    \t\t\ttags[0] = '<span style=\"background:#F8F8F9; border:1px solid #D3D3D3; border-radius:3px; color:#333; padding:0 3px;\">'+tags[0]+'</span>'\n    \t\t\treturn '<span style=\"color:#B6B6B6; font-size:12px;\">at</span> <span style=\"color:#007f1f;\">'+tags.join('<span style=\"color:#6a6dc5;\">.</span>')+'</span> '\n    \t\t}).replace(/\\s\\s\\s\\s/gi, '<div style=\"margin-left:30px; float:left; height:18px; clear:both;\"> </div>').replace(/\\(([^\\)]+)\\)/gi, '<span style=\"color:#E2E2E2;\">(</span><span style=\"color:#a021a5;\">\"$1\"</span><span style=\"color:#E2E2E2;\">)</span>')\n    \t\t)\t\n    \t})\n    \treturn lines.join('<div class=\"newLine\" style=\"margin:3px 0;\"> </div>')\n    }\n    \n\n// ===========================================================================\n//  Function: Template Function\n// ===========================================================================\n    \n    function errorTemplate(signal, error){\n        var message = error.message || '';\n        signal.error('message', error.message)\n        signal.error('stack', error.stack)\n    \treturn \t'<div style=\"font-size:13px; line-height:18px;;\">'\n    \t+\t\t'<div style=\"font-family: monaco, monospace, \\'Lucida Console\\'; clear:both;\">' \n    \t+ \t\t\t'<h2 style=\"font-weight:normal;margin: 15px 0 13px 0;line-height: 14px;font-size: 14px;color: #E42616;\"><span style=\"color: #FFFFFF;background: #EC5C50;padding: 2px 8px;border-radius: 3px;font-size: 12px;font-weight: bold;font-family: sans-serif;float: left;margin-top: -2px;margin-right: 9px;box-shadow: inset 0 0 1px rgba(0,0,0,.6);\">'+ error.name +'</span> '+ message.replace(/\\</gi, '&lt;').replace(/\\>/gi, '&gt;') +'</h2>'\n    \t+\t((error.stack) ? parseStackTrace(error.stack.split('\\n').splice(1)) : '')\n    \t+\t'</div>'\n    \t+'</div>'\t\n    }\n    \n\n// ===========================================================================\n//  Exports\n// ===========================================================================\n\n    module.exports = function(error, signal, app){\n    \tsignal.status(500)\n    \ttry {\n    \t\tsignal.fail.template = errorTemplate(signal, error)\n    \t\tapp.emit('route.error', { error: error, signal: signal, app: app })\n    \t\tnew RouteIterator(app.routes.error, signal, function(){ \n    \t\t    // console.log('Error Routes Finished', signal.url.href);\n    \t\t    if(!signal.responded)  displayErrorPage(error) \n    \t\t}, 'error')\n    \t} catch (error) {\n    \t\tdisplayErrorPage(error)\n    \t}\n    \tfunction displayErrorPage(error){\n    \t\tif(signal.header('x-requested-with') != 'XMLHttpRequest'){\n    \t\t\tsignal.header('content-type', 'text/html; charset=UTF-8');\n    \t\t\tsignal.response.end('<!doctype html/><html><head><title>'+signal.statusCode+' '+signal.statusMessage+'</title></head><body><div style=\"padding: 0 25px;\">'+'<h1 style=\"font-family: monaco, monospace, \\'Lucida Console\\';font-weight:lighter;font-size: 18px;margin: 25px 0 10px 0;color: #BDBDBD;\">'+signal.statusCode+' '+signal.statusMessage+'</h1>' + errorTemplate(signal, error)+'</div></body></html>');\n    \t\t} else {\n    \t\t\tsignal.header('content-type', 'text/plain');\n    \t\t\tsignal.response.end(error.stack);\n    \t\t}\n    \t}\n    }\n    ","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/iterator.js":"// ===========================================================================\n//  Diet.js\n//  Iterator Controller\n// ===========================================================================\n   \"use strict\"\n   \n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n    \n    var ArrayIterator = require('es6-iterator/array')\n\n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n\n    module.exports = function(route, signal, callback, state){\n    \tif(route && route.length){\n    \t\tvar iterator = new ArrayIterator(route);\n    \t\t\n    \t\tfunction nextRoute(){\n    \t\t\tif(!signal.stopped){\n        \t\t\tvar current = iterator.next()\n        \t\t\t\n        \t\t\tif(!current.done){\n        \t\t\t\tcurrent.value.handler(signal.request, signal.response, signal.app, nextRoute, signal)\n        \t\t\t\n        \t\t\t} else if (callback) {\n        \t\t\t\tcallback(signal)\n        \t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\tsignal.nextRoute = nextRoute\n    \t\tnextRoute()\n    \t\n    \t} else if (callback) {\n    \t\tcallback(signal)\n    \t}\n    }\n    \n","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/resource.js":"// ===========================================================================\n//  Diet.js\n//  Resource Controller\n// ===========================================================================\n    module.exports = function(app){\n        return function Resource(path){\n            const resource = Object.assign({}, app);\n            app.emit('resource.init', { app: app, path: path, resource: resource })\n            for(method in app.routes) registerMethod(path, app, resource, method);\n            return resource;\n        }\n    }\n    \n    function registerMethod(path, app, resource, method){\n    \tresource[method] = function AddResourceMethod(){\n    \t\tapp.emit('resource.add_method', { app: app, path: path, method: method, resource: resource })\n    \t\tvar args = Array.prototype.slice.call(arguments);\n    \t\targs.unshift(path)\n    \t\tapp[method].apply(this, args)\n    \t\treturn resource\n    \t}\n    }","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/construct.js":"// ===========================================================================\n//  Diet.js\n//  Construct Controller\n// ===========================================================================\n  \n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n\n    var merge = require('merge')\n    var clone = require('clone')\n    \n// ===========================================================================\n//  Exports\n// ===========================================================================\n\n    module.exports = function(constructName, constructRoot, app){\n        module.app = app;\n        \n        var constructHolder = 'construct_' + constructName;\n        var constructPath = app.path + '/' + constructRoot;\n        if(!app[constructHolder]) app[constructHolder] = {};\n        \n        if(constructName == 'model'){\n            function Model(name){\n                if(!app[constructHolder][constructPath + '/' + name]) {\n                    app[constructHolder][constructPath + '/' + name] = require(constructPath + '/' + name);\n                }\n                return app[constructHolder][constructPath + '/' + name];\n            } \n            return Model;\n            \n        } else if(constructName == 'controller'){\n        \n            function Controller(name, handler){\n                if(!handler){\n                    if(!app[constructHolder][constructPath + '/' + name]) {\n                        app[constructHolder][constructPath + '/' + name] = require(constructPath + '/' + name);\n                    }\n                    return app[constructHolder][constructPath + '/' + name];\n                }\n            }\n            \n            // Register a Proxy Setter/Getter to create Thunks dynamically around Controller Methods\n            var ControllerProxy = new Proxy(Controller, {\n                get: function(target, name) {\n                    return target[name];\n                },\n                set: function(target, name, originalFunction) {\n                    \n                    if(typeof originalFunction == 'function'){\n\t                    // Create a Thunk Around the Function\n\t                    target[name] = function ControllerThunk(){\n\t                        var args = [];\n\t                        for(var i = 0; i < arguments.length; i++) args[i] = arguments[i]\n\t                        if(typeof args[args.length-1] == 'function'){\n\t                            originalFunction.apply(this, args)\n\t                        } else {\n\t                            return function(callback){\n\t                                \n\t                                args[args.length] = callback;\n\t                                //console.log('CONTROLLER CALL: ARGUMENTS -> ', args)\n\t                                //console.log('CONTROLLER CALL: CALLBACK -> ', callback)\n\t                                //console.log('CONTROLLER CALL: HANDLER ->', originalFunction.toString());\n\t                                originalFunction.apply(this, args)\n\t                            }\n\t                        }\n\t                    };\n                    } else {\n                    \ttarget[name] = originalFunction\n                    }\n                    return target[name];\n                }\n            });\n            \n            return ControllerProxy;\n            \n        } else if (constructName == 'view') {\n            return function(config, renderer){\n            \tif(renderer){\n\t                if(config == 'html'){\n\t                    app.html = true;\n\t                    app.header(function($){\n\t                        $.htmlModule = function(pathname){\n\t                            if(!pathname || (pathname && pathname.indexOf(/\\n|\\r/) != -1)){\n\t                        \t\tvar path     = pathname ? pathname : 'index.html' \n\t                        \t\tvar context  = merge(clone($, false, 1), $.data)\n\t                        \t\tvar html     = renderer(path, context)\n\t                        \t\t$.response.end(html)\n\t                        \t} else if (pathname) {\n\t                        \t    $.response.end(pathname)\n\t                        \t}\n\t                        \t\n\t                        \t$.nextRoute() // call next route\n\t                        }\n\t                        $.return()\n\t                    })\n\t                } else if (config == 'file' || config == 'files' || config == 'static') {\n\t                    app.footer(renderer)\n\t                }\n                } else {\n     \t\t\t    if(!app[constructHolder][constructPath + '/' + config]) {\n     \t\t\t        app[constructHolder][constructPath + '/' + config] = require(constructPath + '/' + config);\n     \t\t\t    }\n     \t\t\t    return app[constructHolder][constructPath + '/' + config];\n         \t\t\t\n                }\n            }\n        }\n    }\n    \n","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/protocols/http/index.js":"//\n// HTTP(S) Protocol\n//\nvar Host = require('./host')\n\nmodule.exports = function(app, options, callback){\n    // create new host object\n    var protocolName = typeof options == 'object' && (options.cert || options.key || options.ca) ? 'https' : 'http' ;\n    var protocol = require(protocolName)\n    var host = new Host(app, protocol, app.location)\n    \n    // define http or https server\n    if(protocolName === 'http'){\n        var server = protocol.createServer(host).listen(app.port, callback) ;\n    \n    } else if (protocolName === 'https') {\n        var server = protocol.createServer(options, host).listen(app.port, callback)\n    \n    } else {\n        throw new Error('Cannot start a HTTPS server without Options');\n    }\n    \n    // console inititalization message\n    if(!options.noMessage && !app.silent) console.log(' ... '.dim + app.location.protocol.split(':')[0].toUpperCase() + ' Server is listening on', (app.location.href || (app.location.host)).underline)\n    \n    return server;\n}","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/protocols/http/host.js":"// ===========================================================================\n//  Diet.js\n//  HTTP(S) Host Controller\n// ===========================================================================\n   \"use strict\"\n    \n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n    const Signal        = require('./signal')\n    const Error         = require('../../error')\n    const url           = require('url')\n    const RouteIterator = require('../../iterator')\n    const utils         = require('../../utils')\n    \n// ===========================================================================\n//  Exports\n// ===========================================================================\n\n    module.exports = function(App, protocol, location){\n\n    \treturn function(request, response){\n    \t\t\n    \t    App.emit('route.start', { app: App, request: request, response: response })\n    \t    \n    \t    // set default header\n    \t\tresponse.setHeader('Content-Type', 'text/plain')\n    \t\t\n    \t\t// determine method, host, location, port and hostname\n    \t\tvar method   = request.method ? request.method.toLowerCase() : '' ;      \n    \t\tvar host     = request.headers.host ? request.headers.host : '' ; \n    \t\tvar location = request.url ? url.parse(request.url) : '' ;      \n    \t\tvar port     = host.split(':')[1] || protocol.globalAgent.defaultPort;\n    \t\tvar hostname = utils.isset(port) ? host : host + ':' + protocol.globalAgent.defaultPort ;\n\t\t\t\n    \t\t// get app (host controller) handling this hostname\n    \t\tvar app = App.hosts[hostname] || App.hosts[hostname+':'+port] || App.hosts['0.0.0.0:'+port] || App.hosts[port]\n    \t\t\n    \t\t// if the app (host controller) exists and it has routes for this method\n    \t\tif(app && app.routes && app.routes[method]){ \n    \t\t    \n    \t\t    // set default headers\n    \t\t\tfor(let key in app.defaultHeaders) {\n       \t\t\t\tresponse.setHeader(key, app.defaultHeaders[key])\n    \t\t\t}\n    \t\t\t\n    \t\t\t// get routes for this method\n    \t\t\tlet routes = app.routes[method] \n    \t\t\t\n    \t\t\t// get path from routes\n    \t\t\tlet path = routes[location.pathname]\n    \t\t\tlet match_found = false\n    \t\t\t\n    \t\t\tif(!path){                                     // dynamic path\n    \t\t\t\tfor(let index in routes){                      // loop trough all method routes\n    \t\t\t\t\tlet item = new Array(routes[index][0])\n    \t\t\t\t\tif(item[0].paramRegex){\n    \t\t\t\t\t\tmatch_found = item[0].paramRegex.exec(location.pathname)\n    \t\t\t\t\t\tif(match_found){\n    \t\t\t\t\t\t\tpath = item;\n    \t\t\t\t\t\t\tbreak;\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t\n    \t\t\t// Create Signal\n    \t\t\tnew Signal(request, response, app, protocol, location, path, match_found, signalReady)\n    \t\t\t\n    \t\t\t// When Signal is Ready\n    \t\t\tfunction signalReady(signal){\n    \t\t\t    app.emit('route.headers', { app: app, signal: signal })\n    \t\t\t\tnew RouteIterator(app.routes.header, signal, headersReady, 'header')\n    \t\t\t}\n    \t\t\t\n    \t\t\t// When Headers are Ready\n    \t\t\tfunction headersReady(signal){\n    \t\t\t    \n    \t\t\t\tif(path) { \n    \t\t\t\t    app.emit('route.body', { path: path, app: app, signal: signal })\n    \t\t\t\t\tnew RouteIterator(path, signal, bodyReady, 'body') \n    \t\t\t\t} else {\n    \t\t\t\t    app.emit('route.footer_404', { app: app, signal: signal });\n    \t\t\t\t    bodyReady(signal, 'footer_404');\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t\n    \t\t\t// When Bodies are ready\n    \t\t\tfunction bodyReady(signal, state){\n    \t\t\t    app.emit('route.' + (state || 'footer'));\n    \t\t\t    new RouteIterator(app.routes.footer, signal, footersReady, state || 'footer')\n    \t\t\t}\n    \t\t\t\n    \t\t\t// When Footers are Ready\n    \t\t\tfunction footersReady(signal){\n    \t\t\t\tif(!signal.responded){\n    \t\t\t\t    \n    \t\t\t\t\tsignal.status(404)\n    \t\t\t\t\tif (app.routes && app.routes.missing && app.routes.missing.length){ \n    \t\t\t\t\t    app.emit('route.missing');\n    \t\t\t\t\t\tnew RouteIterator(app.routes.missing, signal, false, 'missing_body') \n    \t\t\t\t\t} else { \n    \t\t\t\t\t    app.emit('route.missingAll');\n    \t\t\t\t\t\tresponse.end('404 page not found') \n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t\n    \t\t\t\n    \t\t} else {\n    \t\t    response.statusCode = 404\n    \t\t\tresponse.end('404 host not found') // no host found\n    \t\t}\t\n    \t\t\n    \t}\n    }","/home/travis/build/npmtest/node-npmtest-diet/node_modules/diet/controllers/protocols/http/signal.js":"// ===========================================================================\n//  Diet.js\n//  Signal Controller\n// ===========================================================================\n   \"use strict\"\n   \n// ===========================================================================\n//  Dependencies\n// ===========================================================================\n\n    const qs = require('querystrings')\n    const fs = require('fs')\n    const url = require('url')\n    const status_codes = require('http').STATUS_CODES;\n    const utils = require('../../utils')\n    const Path = require('path')\n    const mime = require('mime');\n\n// ===========================================================================\n//  Exports\n// ===========================================================================\n    module.exports = function(request, response, app, protocol, location, path, match_found, callback){\n        // ---------------------------------------------------------------------\n        //  signal\n        // ---------------------------------------------------------------------\n    \tlet signal = {\n    \t\tapp: app,\n    \t\turl: location,                                                  // pass parsed request url\n    \t\tqs: qs,                                                         // pass query string parser\n    \t\tquery: location.query ? qs.parse(location.query) : {} ,         // parse query string\n    \t\tresponse: response,                                             // original response\n    \t\trequest: request,                                               // original request\n    \t\tmethod: request.method,                                         // GET or POST\n    \t\tmultipart: false,                                               // is it a multipart request?\n    \t\tparams: {}, data: {}, route: {}, fail: {}, errors: {},          // containers\n    \t\theader : function(where, newValue){\t\n    \t\t\tif(!newValue){                                                  // not a set operation\n    \t\t\t\treturn response.getHeader(where) || request.headers[where]; // get header\n    \t\t\t} else if(!response.headersSent){                               // if headers are not yet sent\n    \t\t\t\treturn response.setHeader(where, newValue);                 // set header\n    \t\t\t}\n    \t\t},\n    \t\tsetHeader: function(key, value){ return response.setHeader(key, value); },\n    \t\tremoveHeader: function(key, value){ return response.removeHeader(key); },\n    \t\tgetHeader: function(key){ return response.getHeader(key); },\n    \t\tgetRequestHeader: function(key){ return request.headers[key] },\n    \t\theaders: request.headers,\t\n    \t\tsend: function(message) { response.write(message); },               // send data chunk to client\n    \t\tsendFile: function(path, encoding){\n\t\t\t    fs.stat(path, function(error, stat){\n\t\t\t    \tif(error){\n\t\t\t    \t\tthrow error;\n\t\t\t    \t} else {\n\t\t\t\t\t    response.writeHead(200, {\n\t\t\t\t\t        'Content-Type': mime.lookup(path),\n\t\t\t\t\t        'Content-Length': stat.size\n\t\t\t\t\t    });\n\t\t\t\t\t    var readStream = fs.createReadStream(path);\n\t\t\t\t\t    readStream.pipe(response);\n\t\t\t\t\t    signal.responded = true\n\t\t\t\t\t    signal.end()\n\t\t\t\t    }\n\t\t\t    })\n    \t\t},\n    \t\tdownload: function(path, name, encoding){\n    \t\t\tvar filename = name ? name : Path.basename(path)\n    \t\t\tsignal.setHeader('Content-Disposition', 'attachment; filename=\"'+filename+'\"')\n    \t\t\tsignal.sendFile(path, encoding)\n    \t\t},\n    \t\tredirect: function(input, statusCode, isLast){\n    \t\t\tif(input.substring(0, 4) === 'back') { \n    \t\t\t\tvar path = request.headers.referer || '/';\n    \t\t\t} else if(input.substring(0, 4) === 'home') { \n    \t\t\t\tvar path = '/'; \n    \t\t\t} else {\n    \t\t\t\tvar path = input;\n    \t\t\t}\n    \t\t\t// Append Additional Routes\n    \t\t\tif(input.split('back')[1]){ path += input.split('back')[1]; }\n    \t\t\tif(input.split('home')[1]){ path += input.split('home')[1]; }\n    \t\t\tlet URI = url.parse(path);\n    \t\t\tif(URI.query){ // Reconstruct the Path\n    \t\t\t\tvar QUERY = '?'+signal.qs.stringify(signal.qs.parse(URI.query));\n    \t\t\t\tvar path = '';\n    \t\t\t\tif(URI.protocol) \tpath += URI.protocol + '//';\n    \t\t\t\tif(URI.hostname) \tpath += URI.hostname;\n    \t\t\t\tif(URI.port) \t\tpath += ':' + URI.port;\n    \t\t\t\tif(URI.pathname) \tpath += URI.pathname;\n    \t\t\t\tif(QUERY) {\n                        if (!path.indexOf(QUERY) > -1) path += QUERY;\n                    }\n    \t\t\t}\n    \t\t\tsignal.status((!statusCode) ? 302 : statusCode)\n    \t\t\tsignal.header('Location', path);\n    \t\t\tresponse.end()\n    \t\t\tsignal.responded = true\n    \t\t\tif(!isLast) signal.nextRoute()\n    \t\t},\n    \t\tenv: process.env.NODE_ENV,\n    \t\tsetFinalHeaders: function(data){\n    \t\t    if(!response.headersSent){\n    \t\t    \tif(!signal.header('content-type')) signal.header('content-type', 'text/plain')\n    \t\t    \tif(data){\n    \t\t    \t\tlet length = typeof data === 'string' ? Buffer.byteLength(data, 'utf8') : data.length ;\n    \t\t    \t\tresponse.setHeader('content-length', length)\n    \t\t    \t}\n    \t\t    }\n    \t\t},\n    \t\tend: function(input, isLast){\n    \t\t\tif(!signal.responded && !signal.stopped){\n    \t\t\t    signal.responded = true\n    \t\t\t    if(input && typeof input == 'object' || signal.header('x-requested-with') == 'XMLHttpRequest' || ( signal.header('authorization') && (signal.header('authorization').indexOf('Bearer') != -1 || signal.header('authorization').indexOf('Token') != -1 ))) { \n    \t\t\t        let data = signal.jsonString(input); // json\n    \t\t\t        signal.setFinalHeaders(data); \n    \t\t\t        response.end(data)      \n    \t\t\t        if(!isLast) signal.nextRoute() // call next route                                                       \n    \t\t\t    \n    \t\t\t    } else if ((!input && app.html) || (input && !Path.extname(input) && app.html)) {\n    \t\t\t        signal.html(input) // html                  \n    \t\t\t    \n    \t\t\t    } else {\n                        signal.setFinalHeaders(input); \n                        response.end(input)  // default\n                        if(!isLast) signal.nextRoute() // call next route\n    \t\t\t    }\n    \t\t\t}\n    \t\t\tif(isLast) signal.stopped = true;\n    \t\t},\n    \t\tstatus : function(code, message){\n    \t\t\tsignal.statusMessage = message || signal.statusMessage || status_codes[code];\t\n    \t\t\tsignal.statusCode = response.statusCode = code;\t\t\t\t\t\n    \t\t},\n    \t\tpassed: true,\n    \t\terror: function(field, error){\n    \t\t\tif(error){\n\t    \t\t\tsignal.passed = signal.data.passed = false\n\t    \t\t\tsignal.errors[field] = error\n    \t\t\t} else if (field) {\n    \t\t\t\treturn signal.errors[field]\n    \t\t\t}\n    \t\t},\n    \t\tsuccess: function(input, isLast){ // respond with JSON success\n    \t\t\tif(!signal.statusCode) signal.status(200)\n    \t\t\tsignal.header('content-type', 'application/json')\n    \t\t\tvar data = signal.data\n    \t\t\tif(utils.isset(input)) data = Object.merge(signal.data, input)\n    \t\t\tdata.passed = true\n    \t\t\tsignal.end(data, isLast)\n    \t\t},\n    \t\tfailure: function(input, isLast){ // respond with JSON errors\n    \t\t\tif(!signal.statusCode) signal.status(200)\n    \t\t\tsignal.header('content-type', 'application/json')\n    \t\t\tif(signal.data.errors) signal.errors = Object.merge(signal.error, signal.data.errors)\n    \t\t\tif(utils.isset(input)) data = Object.merge(signal.errors, input)\n    \t\t\tsignal.end({ passed: false, errors: signal.errors }, isLast)\n    \t\t},\n    \t\tjsonString: function(input){\n    \t\t    if(utils.isset(input)) signal.data = Object.merge(signal.data, input)\n    \t\t    if(!signal.statusCode) signal.status(200)\n    \t\t    signal.header('content-type', 'application/json')\n    \t\t    return JSON.stringify(signal.data);\n    \t\t},\n    \t\tjson : function(input, isLast){ // respond with JSON data\n    \t\t\tsignal.end(signal.jsonString(input), isLast)\n    \t\t},\n    \t\thtml: function(input, isLast){\n    \t\t    signal.header('content-type', 'text/html; charset=UTF-8')\n    \t\t    if(!signal.statusCode) signal.status(200)\n    \t\t    if(signal.htmlModule) { \n    \t\t        signal.htmlModule(input) \n    \t\t    } else { \n    \t\t        response.end(input) \n    \t\t        if(!isLast) signal.nextRoute() // call next route\n    \t\t    }\n    \t\t}\n    \t}\n    \t\n        // ---------------------------------------------------------------------\n        //  signal.params\n        // ---------------------------------------------------------------------\n    \tif(match_found){\t\n    \t\tlet path_keys_length = path[0].paramKeys.length;\n    \t\tfor(let i = 0; i < path_keys_length; i++){\n    \t\t\tlet param = path[0].paramKeys[i];\n    \t\t\tsignal.params[param.name] = match_found[i+1];\n    \t\t}\n    \t}\n    \t\n    \t// ---------------------------------------------------------------------\n        //  signal.body\n        // ---------------------------------------------------------------------\n    \tif(path && request.headers['content-type'] || request.headers['transfer-encoding']){\n    \t\tsignal.body = ''\n    \t\tlet multipart = request.headers['content-type'] && request.headers['content-type'].toString().indexOf('multipart/form-data');\n    \t\tif(multipart === -1){\n    \t\t\tsignal.multipart = false;\n    \t\t\trequest.on('data', function(data){ signal.body += data; });\n    \t\t\trequest.on('end', function(){ \n    \t\t\t\tif(request.headers['content-type'].toString().indexOf('application/x-www-form-urlencoded') != -1){\n    \t\t\t\t\tsignal.body = signal.qs.parse(decodeURIComponent(signal.body));\n    \t\t\t\t} else if(request.headers['content-type'] == \"application/json\") {\n    \t\t\t\t\ttry {\n    \t\t\t\t\t\tsignal.body = JSON.parse(signal.body); \n    \t\t\t\t\t} catch (error) { /*...*/ }\n    \t\t\t\t}\n    \t\t\t\tcallback(signal); \n    \t\t\t});\n    \t\t} else {\n    \t\t\tsignal.multipart = true;\n    \t\t\tcallback(signal);\n    \t\t}\n    \t} else {\n    \t\tcallback(signal);\n    \t}\n    }\n    \n"}